{"timestamp":"2025-05-31T01:04:54.102999","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-31T01:04:54.103226","level":"info","event":"Filling up the DagBag from /home/airflow/dags/custom_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-31T01:04:54.523316Z","level":"error","event":"2025-05-31 01:04:54.523236: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T01:04:54.542715Z","level":"error","event":"2025-05-31 01:04:54.542624: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T01:04:54.542790Z","level":"error","event":"To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.115780Z","level":"error","event":"2025-05-31 01:04:55.115640: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.236946Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237010Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237033Z","level":"info","event":"Current task name:train_model","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237052Z","level":"info","event":"Dag name:train_knn_model","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237067Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237082Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237098Z","level":"info","event":"Task:<Task(_PythonDecoratedOperator): train_model>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237112Z","level":"info","event":"Failure caused by Expected 2D array, got 1D array instead:","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237127Z","level":"info","event":"array=[].","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.237142Z","level":"info","event":"Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:04:55.186218","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"ValueError","exc_value":"Expected 2D array, got 1D array instead:\narray=[].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":838,"name":"run"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1130,"name":"_execute_task"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/bases/decorator.py","lineno":251,"name":"execute"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":216,"name":"execute"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":239,"name":"execute_callable"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/home/airflow/dags/custom_dag.py","lineno":17,"name":"train_model"},{"filename":"/home/airflow/dags/knn_model.py","lineno":30,"name":"train_and_export_knn"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/base.py","lineno":1389,"name":"wrapper"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/neighbors/_classification.py","lineno":239,"name":"fit"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/neighbors/_base.py","lineno":478,"name":"_fit"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/utils/validation.py","lineno":2961,"name":"validate_data"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/utils/validation.py","lineno":1370,"name":"check_X_y"},{"filename":"/opt/venv_airflow/lib/python3.12/site-packages/sklearn/utils/validation.py","lineno":1093,"name":"check_array"}]}]}
